명령프롬프트 - dir치면 나오는 .은 내 파일의 위치를 말함 .. 점두개는 내바로 윗파일을 말함.


<내가 쓰고싶은 코드가 있는 헤더파일 포함시키는 법을 알아보자>
내가 쓰고싶은 코드가 있는 헤더파일은 #include를 이용해 파일 경로를 적어주면 귀찮게 똑같이 코드 안쳐넣어도 헤더파일 안의 미리구현된 코드들을 가져다 쓸 수 있다. 그러면 이제 헤더파일의 경로를 적어줄때 사전작업 하는 방법을 알아보자.

 step 1. 헤더파일이 위치한 파일경로(의 시작점)를 명시해주기 
 
프로젝트 우클릭 -> 속성 -> 구성속성 -> VC++ 디렉터리 -> 포함 디렉토리 : 헤더가 있는곳의 경로(의 시작위치)를 알려주겠다는 설정.
 % 중요 - 맨위에 '구성(C): 모든 구성 플랫폼(P): 모든 플랫폼' 으로 설정해야 의도치 않은 오류가 생기지 않음. 반드시 주의해줘야 한다고 엄청 강조함. 모든 프로젝트가 (해더파일이건, 헤더파일을 가져다 쓰는 프로젝트건) 이 설정이 되어있어야함. 
포함디렉토리에서 파일 경로를 적고, 이름끝에 \; 요 두글자가 마침표임 마침표를 적어줘야함 
여기서 헤더파일 #include 할때 어떨땐 " " 따옴표로, 어떨땐 < > 꺾쇠괄호로 하는지 그 차이가 있는 이유가 밝혀짐
헤더파일의 경로시작 위치를 설정해주면 < > 꺾쇠괄호로 파일위치를 찾아나갈 수 있음. 반면 해주지 않으면 " "를 써서 사용자가 직접 헤더파일 경로를 적어줘야함.
..\; 의 의미는 헤더파일을 찾는 경로의 시작위치가 내 파일의 바로 위에서부터라는 뜻. 

예시) 
포함 디렉터리에 $(VC_IncludePath);$(WindowsSDK_IncludePath); 아무것도 안적어줬을 경우
#include "..\GameEngineBase\GameEngineDebug.h"

포함 디렉터리에 $(VC_IncludePath);$(WindowsSDK_IncludePath);..\; 라고 적어줬을 경우 
#include <GameEngineBase\GameEngineDebug.h>

포함 디렉터리에 $(VC_IncludePath);$(WindowsSDK_IncludePath);..\GameEngineBase\; 사용하고자 하는 헤더파일의 프로젝트위치를 직접 콕 집어서 경로를 설정해준것. 
#include <GameEngineDebug.h>
**코드 간단해보이지만 별로 추천하는 방식은 아님 이유1. 헤더파일이 어디 프로젝트에서 왔는지 파악이 힘듬 2. 다른 프로젝트의 헤더파일 포함시킬때 어차피 복잡해지고 귀찮음


 step 2. 헤더파일의 구현파일까지 포함시키기
 
#include 는 헤더파일만 복사해서 가져오는거기때문에 막상 헤더에 선언된 여러 코드들을 가져다 쓰려면 cpp 파일이 없어서 사용이 안됩니다.
 (헤더안에 모든 내용이 들어있는 경우는 문제없음 선언과 구현이 분리된 파일의 헤더만 include된 경우를 말하는것)
 솔루션 탐색기의 현재 프로젝트열면 바로 밑에 보면 '참조' 라는 단어를 오른쪽 마우스 버튼 클릭하고 '참조 추가(R)'를 클릭. 그리고 원하는 파일을 체크하고 확인 누르면 참조 밑에 내가 참조한 파일목록이 주르륵 나열되어있다

 step 3. 헤더파일 자체의 역할을 명시해주기
 
프로젝트 우클릭 -> 속성 -> 구성속성 -> 일반 -> 구성 형식 : 이 프로젝트의 역할이 뭔지 알려주는 설정
애플리케이션(.exe) 를 정적라이브러리(.lib)로 바꿔 줘야  다른 프로젝트에서 사용할수 있습니다.
구성 형식이 애플리케이션으로 되어있는 프로젝트는 다른 프로젝트에서 가져다 쓸 수 없습니다.(==헤더파일로 쓰려하면 오류납니다) .exe 라는 실행파일을 만드는 용도가 되야 되기 때문입니다
따라서 정적라이브러리 라는 설정을 해줘야 이 프로젝트가 다른프로젝트를 지원하는 역할을 하는 프로젝트라고 명시하게 됩니다.



** 헤더파일을 사용하면 코드를 덜 치면서 생산성과 유지보수를 향상시킬 수 있습니다. 그래서 애초에 프로젝트 파일의 기능을 최대한 잘게잘게 쪼개 놓는 것이 중요합니다. 어떤 프로젝트에서 어떤 기능만이 필요한지 모르기 때문이다