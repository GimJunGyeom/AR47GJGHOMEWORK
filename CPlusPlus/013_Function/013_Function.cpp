/* 함수의 선언방법
  1. 다른함수 내부에서는 선언하지 못한다. 그게 문법상의 정의
  2. 함수는 리턴값이라는 것이 무조건 존재한다.
  3. 
*/

//함수는 만들면 만들수록 느려진다. 그냥 코드는 치면칠수록 느려진다. 그러나 메인함수 안에서 모든걸 하려고하면 유지보수가 힘들어진다.
//함수 이름의 의미. 변수같이 프로세스 몇번째에 메모리를 얼마만큼 공간을 할당할지 컴파일러가 위치를 지정해주는 식별자이다. 모든 이름은 결국 ~바이트 번째 식으로 해석된다. 안그러면 찾아낼수가 없다.
//함수에서 인자의 의미 - 그 실행흐름의 지역변수가 되는 메모리영역. 
//함수에서 리턴의 의미 - 자신을 호출한 외부메모리영역에 데이터를 전달하는 메모리값. 전달 동시에 실행흐름을 끝내는 역할도 있음.

//  리턴값   함수이름    인자(함수에 넘길 메모리)
    void     Function    ()
{

}

int Plus (int _Left, int _Right)
{
    return _Left + _Right;
}

void Test(int _Value)
{
    _Value = 10;
    return;
}

int main()
{
    
    //이것도 똑같이 int형 변수처럼 4바이트를 쓴거다. Plus함수가 리턴으로 4바이트값을 전달한다고 했으니 메인함수는 메인함수 안에 미리 4바이트의 메모리 영역을 만들어 두는 것이다.
    Plus(20, 30);
    bool bResult = Plus(20, 30); //이 코드는 보이는 bReslut 1바이트와 우리에겐 보이지 않는 Plus의 리턴인 4바이트 메모리가 메인스트림에 존재하는 것임.

    int _Value = 20;
    Test(_Value);
    //Test의 _Value와 main의 _Value는 이름이 같은데? 이름 같은 변수는 선언 안되는거 아님? ==> 컴파일러가 자동으로 앞에 함수 이름 붙여줘서 구별시킨다. 즉 이름이 다르다는 말이다. 게다가
    // 생성되는 공간도 다르다. Test의 _Value는 Test_Value 이고 main의 _Value는 main_Value 라고 이름이 다르게 컴파일된다.
    
    int ReturnSize = sizeof(Plus(20, 30));
}
