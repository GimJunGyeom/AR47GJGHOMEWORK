
#include <iostream>
//#include <crt


class Monster
{

};


//힙을 쓰는이유 - 모든걸 메모리 공간에 미리할당해놓고 프로그램 돌리면 용량이 말도 안되게 커진다.
//필요할때 그때마다 메모리 할당하고 또 다시 반환하는 방법이 없을까? -> 힙 메모리 영역 이용하기.
//힙을 쓰기 때문에 200기가 게임도 그보다 적은 ram에서 돌아갈 수 있는 것이다. 전부 값이라면 다 ram에 못올려서 프로그램 돌릴 수가 없다.



int main()
{
    //동적메모리 선언법 - 윈도우에게 허락받고 힙 메모리영역 이용하기. new 연산자.
    //연산자 자료형 생성자
    //new    자료형 ();

    //힙은 가장 자유롭게 메모리를 할당할 수 있는 메모리 영역
    //while(true) { new int();} ==> 메모리를 계속 할당하게 된다. 가만 내버려 두면 운영체제가 꺼버림
    //new int() 는 할당된 메모리 주소를 반환한다.
    //이름이 없으므로 사용하려면 무조건 생성하고 주소값 받아야한다. 아니면 사용 못하고 메모리 낭비만 되버림.
    int* Ptr = new int();
    *Ptr = 20;
    //힙은 포인터로 밖에 주소를 받을 방법이 없다.

    //힙영역은 컴퓨터가 알아서 메모리 지워주지 않기 때문에 프로그래머가 직접 지워줘야함.
    delete Ptr;

    new int(); //이 녀석은 이후에 절대 메모리 못지움. 사용하지도 못함. 
    //프로그램 끝날때까지 메모리 반환 안해주면 컴파일러가 너 메모리 반환 안했어라고 경고를 해줌.
    //이렇게 힙영역에 할당하고 안지우는 걸 메모리 누수라고 함.
    //메모리누수가 많으면 내 프로그램은 느려질수 있음. 그걸 방지하기 위해서라도 무조건 메모리 지워줘야함.

    Monster* PtrMonster = new Monster(); //물론 객체도 동적할당이 됩니다.

    _CrtSetDbgFlag(_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF);
}

