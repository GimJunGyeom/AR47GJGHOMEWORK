

#include <iostream>

//지역 static 변수 - 그 함수 내에서만 쓸수있는 전역변수.

void Test0()
{
    static int Value0 = 1;
    std::cout << Value0 << std::endl;
    Value0++;
}

void Test1()
{
    static int Value0 = 2;
    std::cout << Value0 << std::endl;
    Value0++;
}
///Value0 - 전역변수화 되어도 그 함수에만 쓰이는 지역 전역변수 이기 때문에 이름이 같아도됨.

int main()
{
    for (int i = 0; i < 10; i++)
    {
        Test0();
    }
    for (int i = 0; i < 10; i++)
    {
        Test1();
    }
}


//궁금증 - 여기서부터 알수 있는것이 클래스의 멤버변수에 사용되는 static과 일반적인 static의 의미가 다르다?
// 1. 일반적인 static 변수는 변수의 수명을 '함수종료'에서 '프로그램종료'까지로 변경하는 역할을 한다.
// 2. 그런데 class에서 static 멤버변수는 변수의 수명을 '객체의 메모리 해제'에서 '프로그램종료'까지로 변경하는 역할만 하는게 아니라,
// 3. '모든 객체의 공유'라는 기능이 추가된 것이다. 저 위 코드처럼 지역 static 변수가 다른 함수까지 공유가 되는가 -> 그렇지 않다.
// 이는 초기화 가능여부를 보면 더 정확하게 드러난다. 지역 static 변수는 각 함수에서 따로 선언과 초기화가 가능한반면(공유가 다른데서 안됨, 이름이 같아도 선언이 되는 이유),
// 클래스의 static 멤버변수는 모든 객체가 공유하기 때문에 선언과 초기화를 동시에 못하게 막아놓았다(객체 생성마다 매번 초기화가 되면 공유의 기능이 퇴색되기 때문). 


//추가 - 전역변수(Global)과 정적변수(static)는 애초에 메모리 상 할당자체가 다르다
//https://chfhrqnfrhc.tistory.com/entry/%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EC%99%80-%EC%A0%84%EC%A0%81%EB%B3%80%EC%88%98

// 전역변수와 정적변수의 공통점 - 프로그램 종료때까지 변수가 존재함.
//                       차이점 - 전역변수는 파일 전체가 사용가능, static은 선언된 범위 내에서만 사용가능

// 각자 언제 쓰는게 좋나? 우선 공통적으로 변수의 수명이 프로그램 끝날때까지 있어야 되는 경우. 전역 - 파일전체가 사용해야함
//                                                                                            정적 - 일부 지역에서만 사용해야함

// BSS 영역? - 초기화된 전역변수는 DATA 영역에, 초기화 안된 전역변수는 BSS 영역에 저장됨.
// Code, Data, BSS는 컴파일 이후 크기 안변함. Heap, Stack 은 바뀜.
